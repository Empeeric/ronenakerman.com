{
  "_args": [
    [
      {
        "raw": "varint@http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
        "scope": null,
        "escapedName": "varint",
        "name": "varint",
        "rawSpec": "http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
        "spec": "http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
        "type": "remote"
      },
      "C:\\code\\2low\\ronenakerman\\node_modules\\formage"
    ]
  ],
  "_from": "http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
  "_id": "varint@0.0.3",
  "_inCache": true,
  "_location": "/formage/grist/git-node/js-git/git-pack-codec/varint",
  "_phantomChildren": {},
  "_requested": {
    "raw": "varint@http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
    "scope": null,
    "escapedName": "varint",
    "name": "varint",
    "rawSpec": "http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
    "spec": "http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/formage/grist/git-node/js-git/git-pack-codec"
  ],
  "_resolved": "http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
  "_shasum": "b821de9b04b38b3cd22f72c18d94a9fb72ab3518",
  "_shrinkwrap": null,
  "_spec": "varint@http://registry.npmjs.org/varint/-/varint-0.0.3.tgz",
  "_where": "C:\\code\\2low\\ronenakerman\\node_modules\\formage",
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "bugs": {
    "url": "https://github.com/chrisdickinson/varint/issues"
  },
  "dependencies": {},
  "description": "use msb to create integer values of varying sizes",
  "devDependencies": {
    "tape": "~0.2.2"
  },
  "homepage": "https://github.com/chrisdickinson/varint#readme",
  "keywords": [
    "varint",
    "protobuf",
    "encode",
    "decode"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "varint",
  "optionalDependencies": {},
  "readme": "# varint\n\ndecode [protobuf-style varint bytes](https://developers.google.com/protocol-buffers/docs/encoding#varints) and emit whole integers when enough have been accumulated that a number can be constructed; also encode whole numbers to an array of varint style bytes.\n\n```javascript\nvar varint = require('varint')\n\nvar bytes = varint.encode(300) // === [0xAC, 0x02]\n  , vi = varint()\n\nvi.once('data', function(num) {\n  console.log('got', num)\n})\n\nvi.write(bytes[0])\nvi.write(bytes[1]) // \"got 300\"\n\n```\n\n## api\n\n### varint = require('varint')\n\n### varint.encode(num[, output=[], offset=0]) -> array\n\nencodes `num` into either the array given by `offset` or a new array at `offset`\nand returns that array.\n\n### vi = varint() -> EventEmitter\n\nreturn a new `varint` instance.\n\n### vi.write(byte) -> undefined\n\nwrite a byte to the varint. if the byte is \"final\" (i.e., does not have the bit at `0x80` set),\nit will attempt to compile the number and emit it as a `data` event.\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/varint.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.0.3"
}
